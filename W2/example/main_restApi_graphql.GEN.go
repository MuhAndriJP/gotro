package main
// WARNING: DO NOT edit this file, it would be overwritten by domain/0_generator_test.go


import (
	`github.com/graphql-go/graphql`
	`github.com/kokizzu/gotro/L`
	`github.com/kokizzu/gotro/W2/example/domain`
	`github.com/kokizzu/gotro/W2/example/model/mAuth/rqAuth`
	`github.com/kokizzu/gotro/W2/example/model/mStore/rqStore`
	`github.com/kokizzu/gotro/X`
	`github.com/mitchellh/mapstructure`
	`github.com/pkg/errors`
)

// can be hit using with /graphql

func initGraphqlSchemaResolver(d *domain.Domain) graphql.Schema {

	var graphqlQueries = graphql.NewObject(graphql.ObjectConfig{
		Name: "query",
		Fields: graphql.Fields{
			`StoreProducts`: &graphql.Field{
				Type: graphqlTypeStoreProductsOut,
				Args: graphql.FieldConfigArgument{
					`debug`: &graphql.ArgumentConfig{
						Type: graphql.Boolean,
					},
					`limit`: &graphql.ArgumentConfig{
						Type: graphql.Int, // uint32
					},
					`offset`: &graphql.ArgumentConfig{
						Type: graphql.Int, // uint32
					},
				}, // StoreProductsIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.StoreProducts_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					out := d.StoreProducts(&in)
					err = graphqlWrapError(err, out.Error)
					if in.Debug {
						backup := in.TracerContext
						in.TracerContext = nil
						out.Debug = X.ToJson(in)
						in.TracerContext = backup
					}
					res = out
					//L.Describe(res)
					return
				},
			},
			`UserList`: &graphql.Field{
				Type: graphqlTypeUserListOut,
				Args: graphql.FieldConfigArgument{
					`debug`: &graphql.ArgumentConfig{
						Type: graphql.Boolean,
					},
					`limit`: &graphql.ArgumentConfig{
						Type: graphql.Int, // uint32
					},
					`offset`: &graphql.ArgumentConfig{
						Type: graphql.Int, // uint32
					},
				}, // UserListIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserList_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					out := d.UserList(&in)
					err = graphqlWrapError(err, out.Error)
					if in.Debug {
						backup := in.TracerContext
						in.TracerContext = nil
						out.Debug = X.ToJson(in)
						in.TracerContext = backup
					}
					res = out
					//L.Describe(res)
					return
				},
			},
			`UserProfile`: &graphql.Field{
				Type: graphqlTypeUserProfileOut,
				Args: graphql.FieldConfigArgument{
					`debug`: &graphql.ArgumentConfig{
						Type: graphql.Boolean,
					},
					`sessionToken`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
				}, // UserProfileIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserProfile_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					out := d.UserProfile(&in)
					err = graphqlWrapError(err, out.Error)
					if in.Debug {
						backup := in.TracerContext
						in.TracerContext = nil
						out.Debug = X.ToJson(in)
						in.TracerContext = backup
					}
					res = out
					//L.Describe(res)
					return
				},
			},
		},
	}) // end of Queries

	var graphqlMutations = graphql.NewObject(graphql.ObjectConfig{
		Name: "Mutation",
		Fields: graphql.Fields{
			`StoreCartItemsAdd`: &graphql.Field{
				Type: graphqlTypeStoreCartItemsAddOut,
				Args: graphql.FieldConfigArgument{
					`debug`: &graphql.ArgumentConfig{
						Type: graphql.Boolean,
					},
					`productId`: &graphql.ArgumentConfig{
						Type: graphql.Int, // uint64
					},
					`deltaQty`: &graphql.ArgumentConfig{
						Type: graphql.Int, // int64
					},
					`sessionToken`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
				}, // StoreCartItemsAddIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.StoreCartItemsAdd_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					out := d.StoreCartItemsAdd(&in)
					err = graphqlWrapError(err, out.Error)
					if in.Debug {
						backup := in.TracerContext
						in.TracerContext = nil
						out.Debug = X.ToJson(in)
						in.TracerContext = backup
					}
					res = out
					//L.Describe(res)
					return
				},
			},
			`StoreInvoice`: &graphql.Field{
				Type: graphqlTypeStoreInvoiceOut,
				Args: graphql.FieldConfigArgument{
					`debug`: &graphql.ArgumentConfig{
						Type: graphql.Boolean,
					},
					`invoiceId`: &graphql.ArgumentConfig{
						Type: graphql.Int, // uint64
					},
					`recalculate`: &graphql.ArgumentConfig{
						Type: graphql.Boolean, // bool
					},
					`doPurchase`: &graphql.ArgumentConfig{
						Type: graphql.Boolean, // bool
					},
					`sessionToken`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
				}, // StoreInvoiceIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.StoreInvoice_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					out := d.StoreInvoice(&in)
					err = graphqlWrapError(err, out.Error)
					if in.Debug {
						backup := in.TracerContext
						in.TracerContext = nil
						out.Debug = X.ToJson(in)
						in.TracerContext = backup
					}
					res = out
					//L.Describe(res)
					return
				},
			},
			`UserChangeEmail`: &graphql.Field{
				Type: graphqlTypeUserChangeEmailOut,
				Args: graphql.FieldConfigArgument{
					`debug`: &graphql.ArgumentConfig{
						Type: graphql.Boolean,
					},
				}, // UserChangeEmailIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserChangeEmail_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					out := d.UserChangeEmail(&in)
					err = graphqlWrapError(err, out.Error)
					if in.Debug {
						backup := in.TracerContext
						in.TracerContext = nil
						out.Debug = X.ToJson(in)
						in.TracerContext = backup
					}
					res = out
					//L.Describe(res)
					return
				},
			},
			`UserChangePassword`: &graphql.Field{
				Type: graphqlTypeUserChangePasswordOut,
				Args: graphql.FieldConfigArgument{
					`debug`: &graphql.ArgumentConfig{
						Type: graphql.Boolean,
					},
					`password`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
					`newPassword`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
					`sessionToken`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
				}, // UserChangePasswordIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserChangePassword_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					out := d.UserChangePassword(&in)
					err = graphqlWrapError(err, out.Error)
					if in.Debug {
						backup := in.TracerContext
						in.TracerContext = nil
						out.Debug = X.ToJson(in)
						in.TracerContext = backup
					}
					res = out
					//L.Describe(res)
					return
				},
			},
			`UserConfirmEmail`: &graphql.Field{
				Type: graphqlTypeUserConfirmEmailOut,
				Args: graphql.FieldConfigArgument{
					`debug`: &graphql.ArgumentConfig{
						Type: graphql.Boolean,
					},
				}, // UserConfirmEmailIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserConfirmEmail_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					out := d.UserConfirmEmail(&in)
					err = graphqlWrapError(err, out.Error)
					if in.Debug {
						backup := in.TracerContext
						in.TracerContext = nil
						out.Debug = X.ToJson(in)
						in.TracerContext = backup
					}
					res = out
					//L.Describe(res)
					return
				},
			},
			`UserForgotPassword`: &graphql.Field{
				Type: graphqlTypeUserForgotPasswordOut,
				Args: graphql.FieldConfigArgument{
					`debug`: &graphql.ArgumentConfig{
						Type: graphql.Boolean,
					},
					`email`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
					`changePassCallback`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
				}, // UserForgotPasswordIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserForgotPassword_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					out := d.UserForgotPassword(&in)
					err = graphqlWrapError(err, out.Error)
					if in.Debug {
						backup := in.TracerContext
						in.TracerContext = nil
						out.Debug = X.ToJson(in)
						in.TracerContext = backup
					}
					res = out
					//L.Describe(res)
					return
				},
			},
			`UserLogin`: &graphql.Field{
				Type: graphqlTypeUserLoginOut,
				Args: graphql.FieldConfigArgument{
					`debug`: &graphql.ArgumentConfig{
						Type: graphql.Boolean,
					},
					`email`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
					`password`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
				}, // UserLoginIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserLogin_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					out := d.UserLogin(&in)
					err = graphqlWrapError(err, out.Error)
					if in.Debug {
						backup := in.TracerContext
						in.TracerContext = nil
						out.Debug = X.ToJson(in)
						in.TracerContext = backup
					}
					res = out
					//L.Describe(res)
					return
				},
			},
			`UserLogout`: &graphql.Field{
				Type: graphqlTypeUserLogoutOut,
				Args: graphql.FieldConfigArgument{
					`debug`: &graphql.ArgumentConfig{
						Type: graphql.Boolean,
					},
				}, // UserLogoutIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserLogout_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					out := d.UserLogout(&in)
					err = graphqlWrapError(err, out.Error)
					if in.Debug {
						backup := in.TracerContext
						in.TracerContext = nil
						out.Debug = X.ToJson(in)
						in.TracerContext = backup
					}
					res = out
					//L.Describe(res)
					return
				},
			},
			`UserRegister`: &graphql.Field{
				Type: graphqlTypeUserRegisterOut,
				Args: graphql.FieldConfigArgument{
					`debug`: &graphql.ArgumentConfig{
						Type: graphql.Boolean,
					},
					`userName`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
					`email`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
					`password`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
				}, // UserRegisterIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserRegister_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					out := d.UserRegister(&in)
					err = graphqlWrapError(err, out.Error)
					if in.Debug {
						backup := in.TracerContext
						in.TracerContext = nil
						out.Debug = X.ToJson(in)
						in.TracerContext = backup
					}
					res = out
					//L.Describe(res)
					return
				},
			},
			`UserResetPassword`: &graphql.Field{
				Type: graphqlTypeUserResetPasswordOut,
				Args: graphql.FieldConfigArgument{
					`debug`: &graphql.ArgumentConfig{
						Type: graphql.Boolean,
					},
					`password`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
					`secretCode`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
					`hash`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
				}, // UserResetPasswordIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserResetPassword_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					out := d.UserResetPassword(&in)
					err = graphqlWrapError(err, out.Error)
					if in.Debug {
						backup := in.TracerContext
						in.TracerContext = nil
						out.Debug = X.ToJson(in)
						in.TracerContext = backup
					}
					res = out
					//L.Describe(res)
					return
				},
			},
		},
	}) // end of Mutations

	graphqlSchema, err := graphql.NewSchema(graphql.SchemaConfig{
		Query: graphqlQueries,
		Mutation: graphqlMutations,
		Types: graphqlTypes,
	})
	L.PanicIf(err,"failed graphql.NewSchema")

	return graphqlSchema
}

var graphqlTypes = []graphql.Type{
	graphqlTypeStoreCartItemsAddOut,
	graphqlTypeStoreInvoiceOut,
	graphqlTypeStoreProductsOut,
	graphqlTypeUserChangeEmailOut,
	graphqlTypeUserChangePasswordOut,
	graphqlTypeUserConfirmEmailOut,
	graphqlTypeUserForgotPasswordOut,
	graphqlTypeUserListOut,
	graphqlTypeUserLoginOut,
	graphqlTypeUserLogoutOut,
	graphqlTypeUserProfileOut,
	graphqlTypeUserRegisterOut,
	graphqlTypeUserResetPasswordOut,
}

// WARNING: DO NOT edit this file, it would be overwritten by domain/0_generator_test.go

var graphqlTypeStoreCartItemsAddOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `StoreCartItemsAddOut`,
	Fields: graphql.Fields{
		"ResponseCommon": &graphql.Field{
			Type: graphqlTypeResponseCommon,
		},
		`cartItems`: &graphql.Field{
			Type: graphql.NewList(rqStore.GraphqlTypeCartItems), //  []rqStore.CartItems
		},
		`total`: &graphql.Field{
			Type: graphql.Int, // uint32
		},
	},
})
var graphqlTypeStoreInvoiceOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `StoreInvoiceOut`,
	Fields: graphql.Fields{
		"ResponseCommon": &graphql.Field{
			Type: graphqlTypeResponseCommon,
		},
		`cartItems`: &graphql.Field{
			Type: graphql.NewList(rqStore.GraphqlTypeCartItems), //  []rqStore.CartItems
		},
		`invoice`: &graphql.Field{
			Type: rqStore.GraphqlTypeInvoices, // rqStore.Invoices
		},
	},
})
var graphqlTypeStoreProductsOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `StoreProductsOut`,
	Fields: graphql.Fields{
		"ResponseCommon": &graphql.Field{
			Type: graphqlTypeResponseCommon,
		},
		`limit`: &graphql.Field{
			Type: graphql.Int, // uint32
		},
		`offset`: &graphql.Field{
			Type: graphql.Int, // uint32
		},
		`total`: &graphql.Field{
			Type: graphql.Int, // uint32
		},
		`products`: &graphql.Field{
			Type: graphql.NewList(rqStore.GraphqlTypeProducts), //  []rqStore.Products
		},
	},
})
var graphqlTypeUserChangeEmailOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserChangeEmailOut`,
	Fields: graphql.Fields{
		"ResponseCommon": &graphql.Field{
			Type: graphqlTypeResponseCommon,
		},
	},
})
var graphqlTypeUserChangePasswordOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserChangePasswordOut`,
	Fields: graphql.Fields{
		"ResponseCommon": &graphql.Field{
			Type: graphqlTypeResponseCommon,
		},
		`updatedAt`: &graphql.Field{
			Type: graphql.Int, // int64
		},
	},
})
var graphqlTypeUserConfirmEmailOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserConfirmEmailOut`,
	Fields: graphql.Fields{
		"ResponseCommon": &graphql.Field{
			Type: graphqlTypeResponseCommon,
		},
	},
})
var graphqlTypeUserForgotPasswordOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserForgotPasswordOut`,
	Fields: graphql.Fields{
		"ResponseCommon": &graphql.Field{
			Type: graphqlTypeResponseCommon,
		},
		`ok`: &graphql.Field{
			Type: graphql.Boolean, // bool
		},
	},
})
var graphqlTypeUserListOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserListOut`,
	Fields: graphql.Fields{
		"ResponseCommon": &graphql.Field{
			Type: graphqlTypeResponseCommon,
		},
		`limit`: &graphql.Field{
			Type: graphql.Int, // uint32
		},
		`offset`: &graphql.Field{
			Type: graphql.Int, // uint32
		},
		`total`: &graphql.Field{
			Type: graphql.Int, // uint32
		},
		`users`: &graphql.Field{
			Type: graphql.NewList(rqAuth.GraphqlTypeUsers), //  []rqAuth.Users
		},
	},
})
var graphqlTypeUserLoginOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserLoginOut`,
	Fields: graphql.Fields{
		"ResponseCommon": &graphql.Field{
			Type: graphqlTypeResponseCommon,
		},
	},
})
var graphqlTypeUserLogoutOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserLogoutOut`,
	Fields: graphql.Fields{
		"ResponseCommon": &graphql.Field{
			Type: graphqlTypeResponseCommon,
		},
		`loggedOut`: &graphql.Field{
			Type: graphql.Boolean, // bool
		},
	},
})
var graphqlTypeUserProfileOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserProfileOut`,
	Fields: graphql.Fields{
		"ResponseCommon": &graphql.Field{
			Type: graphqlTypeResponseCommon,
		},
		`user`: &graphql.Field{
			Type: rqAuth.GraphqlTypeUsers, // rqAuth.Users
		},
	},
})
var graphqlTypeUserRegisterOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserRegisterOut`,
	Fields: graphql.Fields{
		"ResponseCommon": &graphql.Field{
			Type: graphqlTypeResponseCommon,
		},
		`createdAt`: &graphql.Field{
			Type: graphql.Int, // int64
		},
		`userId`: &graphql.Field{
			Type: graphql.Int, // uint64
		},
	},
})
var graphqlTypeUserResetPasswordOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserResetPasswordOut`,
	Fields: graphql.Fields{
		"ResponseCommon": &graphql.Field{
			Type: graphqlTypeResponseCommon,
		},
		`ok`: &graphql.Field{
			Type: graphql.Boolean, // bool
		},
	},
})
// WARNING: DO NOT edit this file, it would be overwritten by domain/0_generator_test.go
