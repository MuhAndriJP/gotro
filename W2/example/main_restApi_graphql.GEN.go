package main

// WARNING: DO NOT edit this file, it would be overwritten by domain/0_generator_test.go

import (
	"github.com/graphql-go/graphql"
	"github.com/kokizzu/gotro/L"
	"github.com/kokizzu/gotro/W2/example/domain"
	"github.com/kokizzu/gotro/W2/example/model/mAuth/rqAuth"
	"github.com/kokizzu/gotro/X"
	"github.com/mitchellh/mapstructure"
	"github.com/pkg/errors"
)

// can be hit using with /graphql

func initGraphqlSchemaResolver(d *domain.Domain) graphql.Schema {

	var graphqlQueries = graphql.NewObject(graphql.ObjectConfig{
		Name: "query",
		Fields: graphql.Fields{
			`UserList`: &graphql.Field{
				Type: graphqlTypeUserListOut,
				Args: graphql.FieldConfigArgument{
					`Limit`: &graphql.ArgumentConfig{
						Type: graphql.Int, // uint32
					},
					`Offset`: &graphql.ArgumentConfig{
						Type: graphql.Int, // uint32
					},
				}, // UserListIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserList_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					res = d.UserList(&in)
					if rc.Debug {
						L.Describe(res)
					}
					L.Describe(res)
					return
				},
			},
			`UserProfile`: &graphql.Field{
				Type: graphqlTypeUserProfileOut,
				Args: graphql.FieldConfigArgument{
					`sessionToken`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
				}, // UserProfileIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserProfile_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					res = d.UserProfile(&in)
					if rc.Debug {
						L.Describe(res)
					}
					L.Describe(res)
					return
				},
			},
		},
	}) // end of Queries

	var graphqlMutations = graphql.NewObject(graphql.ObjectConfig{
		Name: "Mutation",
		Fields: graphql.Fields{
			`UserChangeEmail`: &graphql.Field{
				Type: graphqlTypeUserChangeEmailOut,
				Args: graphql.FieldConfigArgument{}, // UserChangeEmailIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserChangeEmail_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					res = d.UserChangeEmail(&in)
					if rc.Debug {
						L.Describe(res)
					}
					L.Describe(res)
					return
				},
			},
			`UserChangePassword`: &graphql.Field{
				Type: graphqlTypeUserChangePasswordOut,
				Args: graphql.FieldConfigArgument{
					`Password`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
					`NewPassword`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
					`sessionToken`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
				}, // UserChangePasswordIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserChangePassword_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					res = d.UserChangePassword(&in)
					if rc.Debug {
						L.Describe(res)
					}
					L.Describe(res)
					return
				},
			},
			`UserConfirmEmail`: &graphql.Field{
				Type: graphqlTypeUserConfirmEmailOut,
				Args: graphql.FieldConfigArgument{}, // UserConfirmEmailIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserConfirmEmail_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					res = d.UserConfirmEmail(&in)
					if rc.Debug {
						L.Describe(res)
					}
					L.Describe(res)
					return
				},
			},
			`UserForgotPassword`: &graphql.Field{
				Type: graphqlTypeUserForgotPasswordOut,
				Args: graphql.FieldConfigArgument{
					`Email`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
					`ChangePassCallback`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
				}, // UserForgotPasswordIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserForgotPassword_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					res = d.UserForgotPassword(&in)
					if rc.Debug {
						L.Describe(res)
					}
					L.Describe(res)
					return
				},
			},
			`UserLogin`: &graphql.Field{
				Type: graphqlTypeUserLoginOut,
				Args: graphql.FieldConfigArgument{
					`Email`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
					`Password`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
				}, // UserLoginIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserLogin_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					res = d.UserLogin(&in)
					if rc.Debug {
						L.Describe(res)
					}
					L.Describe(res)
					return
				},
			},
			`UserLogout`: &graphql.Field{
				Type: graphqlTypeUserLogoutOut,
				Args: graphql.FieldConfigArgument{}, // UserLogoutIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserLogout_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					res = d.UserLogout(&in)
					if rc.Debug {
						L.Describe(res)
					}
					L.Describe(res)
					return
				},
			},
			`UserRegister`: &graphql.Field{
				Type: graphqlTypeUserRegisterOut,
				Args: graphql.FieldConfigArgument{
					`UserName`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
					`Email`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
					`Password`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
				}, // UserRegisterIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserRegister_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					res = d.UserRegister(&in)
					if rc.Debug {
						L.Describe(res)
					}
					L.Describe(res)
					return
				},
			},
			`UserResetPassword`: &graphql.Field{
				Type: graphqlTypeUserResetPasswordOut,
				Args: graphql.FieldConfigArgument{
					`Password`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
					`SecretCode`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
					`Hash`: &graphql.ArgumentConfig{
						Type: graphql.String, // string
					},
				}, // UserResetPasswordIn
				Resolve: func(p graphql.ResolveParams) (res interface{}, err error) {
					defer func() {
						rErr := recover()
						if rErr != nil {
							L.Describe(rErr)
							err = errors.Wrap(err, X.ToS(rErr))
						}
					}()
					rc := p.Context.Value(RequestCommonKey).(*domain.RequestCommon)
					in := domain.UserResetPassword_In{RequestCommon: *rc}
					err = mapstructure.Decode(p.Args, &in)
					res = d.UserResetPassword(&in)
					if rc.Debug {
						L.Describe(res)
					}
					L.Describe(res)
					return
				},
			},
		},
	}) // end of Mutations

	graphqlSchema, err := graphql.NewSchema(graphql.SchemaConfig{
		Query:    graphqlQueries,
		Mutation: graphqlMutations,
		Types:    graphqlTypes,
	})
	L.PanicIf(err, "failed graphql.NewSchema")

	return graphqlSchema
}

var graphqlTypes = []graphql.Type{
	graphqlTypeUserChangeEmailOut,
	graphqlTypeUserChangePasswordOut,
	graphqlTypeUserConfirmEmailOut,
	graphqlTypeUserForgotPasswordOut,
	graphqlTypeUserListOut,
	graphqlTypeUserLoginOut,
	graphqlTypeUserLogoutOut,
	graphqlTypeUserProfileOut,
	graphqlTypeUserRegisterOut,
	graphqlTypeUserResetPasswordOut,
}

// WARNING: DO NOT edit this file, it would be overwritten by domain/0_generator_test.go

var graphqlTypeUserChangeEmailOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserChangeEmailOut`,
	Fields: graphql.Fields{
		"debug": &graphql.Field{
			Type: graphql.String,
		},
		"StatusCode": &graphql.Field{
			Type: graphql.Int,
		},
		"error": &graphql.Field{
			Type: graphql.String,
		},
		"SessionToken": &graphql.Field{
			Type: graphql.String,
		},
	},
})
var graphqlTypeUserChangePasswordOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserChangePasswordOut`,
	Fields: graphql.Fields{
		"debug": &graphql.Field{
			Type: graphql.String,
		},
		"StatusCode": &graphql.Field{
			Type: graphql.Int,
		},
		"error": &graphql.Field{
			Type: graphql.String,
		},
		"SessionToken": &graphql.Field{
			Type: graphql.String,
		},
		`UpdatedAt`: &graphql.Field{
			Type: graphql.Int, // int64
		},
	},
})
var graphqlTypeUserConfirmEmailOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserConfirmEmailOut`,
	Fields: graphql.Fields{
		"debug": &graphql.Field{
			Type: graphql.String,
		},
		"StatusCode": &graphql.Field{
			Type: graphql.Int,
		},
		"error": &graphql.Field{
			Type: graphql.String,
		},
		"SessionToken": &graphql.Field{
			Type: graphql.String,
		},
	},
})
var graphqlTypeUserForgotPasswordOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserForgotPasswordOut`,
	Fields: graphql.Fields{
		"debug": &graphql.Field{
			Type: graphql.String,
		},
		"StatusCode": &graphql.Field{
			Type: graphql.Int,
		},
		"error": &graphql.Field{
			Type: graphql.String,
		},
		"SessionToken": &graphql.Field{
			Type: graphql.String,
		},
		`Ok`: &graphql.Field{
			Type: graphql.Boolean, // bool
		},
	},
})
var graphqlTypeUserListOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserListOut`,
	Fields: graphql.Fields{
		"debug": &graphql.Field{
			Type: graphql.String,
		},
		"StatusCode": &graphql.Field{
			Type: graphql.Int,
		},
		"error": &graphql.Field{
			Type: graphql.String,
		},
		"SessionToken": &graphql.Field{
			Type: graphql.String,
		},
		`Limit`: &graphql.Field{
			Type: graphql.Int, // uint32
		},
		`Offset`: &graphql.Field{
			Type: graphql.Int, // uint32
		},
		`Total`: &graphql.Field{
			Type: graphql.Int, // uint32
		},
		`Users`: &graphql.Field{
			Type: graphql.NewList(rqAuth.GraphqlTypeUsers), //  []rqAuth.Users
		},
	},
})
var graphqlTypeUserLoginOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserLoginOut`,
	Fields: graphql.Fields{
		"debug": &graphql.Field{
			Type: graphql.String,
		},
		"StatusCode": &graphql.Field{
			Type: graphql.Int,
		},
		"error": &graphql.Field{
			Type: graphql.String,
		},
		"SessionToken": &graphql.Field{
			Type: graphql.String,
		},
		`sessionToken`: &graphql.Field{
			Type: graphql.String, // string
		},
	},
})
var graphqlTypeUserLogoutOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserLogoutOut`,
	Fields: graphql.Fields{
		"debug": &graphql.Field{
			Type: graphql.String,
		},
		"StatusCode": &graphql.Field{
			Type: graphql.Int,
		},
		"error": &graphql.Field{
			Type: graphql.String,
		},
		"SessionToken": &graphql.Field{
			Type: graphql.String,
		},
		`LoggedOut`: &graphql.Field{
			Type: graphql.Boolean, // bool
		},
		`sessionToken`: &graphql.Field{
			Type: graphql.String, // string
		},
	},
})
var graphqlTypeUserProfileOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserProfileOut`,
	Fields: graphql.Fields{
		"debug": &graphql.Field{
			Type: graphql.String,
		},
		"StatusCode": &graphql.Field{
			Type: graphql.Int,
		},
		"error": &graphql.Field{
			Type: graphql.String,
		},
		"SessionToken": &graphql.Field{
			Type: graphql.String,
		},
		`User`: &graphql.Field{
			Type: rqAuth.GraphqlTypeUsers, // rqAuth.Users
		},
	},
})
var graphqlTypeUserRegisterOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserRegisterOut`,
	Fields: graphql.Fields{
		"debug": &graphql.Field{
			Type: graphql.String,
		},
		"StatusCode": &graphql.Field{
			Type: graphql.Int,
		},
		"error": &graphql.Field{
			Type: graphql.String,
		},
		"SessionToken": &graphql.Field{
			Type: graphql.String,
		},
		`CreatedAt`: &graphql.Field{
			Type: graphql.Int, // int64
		},
		`UserId`: &graphql.Field{
			Type: graphql.Int, // uint64
		},
	},
})
var graphqlTypeUserResetPasswordOut = graphql.NewObject(graphql.ObjectConfig{
	Name: `UserResetPasswordOut`,
	Fields: graphql.Fields{
		"debug": &graphql.Field{
			Type: graphql.String,
		},
		"StatusCode": &graphql.Field{
			Type: graphql.Int,
		},
		"error": &graphql.Field{
			Type: graphql.String,
		},
		"SessionToken": &graphql.Field{
			Type: graphql.String,
		},
		`Ok`: &graphql.Field{
			Type: graphql.Boolean, // bool
		},
	},
})

// WARNING: DO NOT edit this file, it would be overwritten by domain/0_generator_test.go
